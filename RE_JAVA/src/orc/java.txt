문제이해 -> 설계 (방법을 알고 차근차근 풀어간다) > 프로그램 작성.



첫번째 과제 =
구구단.

'JShell REPL
읽기- 분석 출력 반복

Statements.구문
Expressions 식
Variables 변수
literals
if statement
For loop
method/function


리티럴 = 변하지 않는 값 = 상수'


= 연산자 5개 해보기
= 서로 다른 연산자로 복합 연산자 해보기
= 하루에 몇분있는지 계산1_
= 하루에 몇초가 있는지 계산2_

precedence  
==============================

엄격한 문법.
() << 통과 시킬 내용(함수, 식) << 매개변수
print << 라는 메서드.



오후 11:39 2022-05-2
===============================
어떻게 변수가 메모리에 저장되는가? 
>>

메모리 로컬 / value / name
5004	/ 5	/ a
5008	/ 10 	/ b
..

선언되는 순간 'a'Name에 '5'value가 들어간다.

===============================
오후 7:13 2022-05-31
 Method 구문

ReturnType 메소드이름(Type 매개변수이름){
	코드
}

void sayHelloWrold(){
	System.out.println("HelloWorld");
}
sayHelloWrold();





오후 3:32 2022-06-02
void sayHelloWorldTwice()

======================================
매개변수로 받은 값만큼 출력하기

	public static void printNumber(int numberA) {
		for(int i=0; i<numberA; i++) {
			System.out.println(numberA);
		}
	}
	
	public static void main(String [] args) {
		printNumber(6);
	}


===	public static int calThirdAngle(int angel1, int angel2) {
		int angel3 = 180 - ( angel1 + angel2);
		System.out.println(angel3);
		return angel3;
	}
	
	public static void main(String [] args) {
		calThirdAngle(40, 85);
		
	}


============================================
0,1 이건 컴퓨터가 알아듣는 기본적인 명령어.
0,1 을 사용해 기본명령을 구성하고 프로그램을 만든다.
운영체제를 위한 명령어로 바뀐다. 

바이트코드
 - 운영체제와 관계없이 공통적인 포맷을 취한다.
 - 운영체제는 바이트코드를 이해하지 못하지만, 기초적 명령만 알아듣는다.
 - JVM JAVA Virtual Machine
  >> 바이트코드를 운영체제에 맞는 명령어로 바꿔주는 역할.


클래스?
 > 오브젝트의 모음집.
 > 클래스 내부에 내용물 오브젝트.

 > class A {}
 public static void main(String [] args){
	A bbc = new A();
 }
클래스(인스턴스) 생성.
 bbc = 오브젝트

ex)
public class temp {
	public void commingsoon() {
		System.out.println("잠시후..");
	}

	public static void main(String[] args) {
		temp A1 = new temp();
		A1.commingsoon();
	}
}







\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
오후 11:02 2022-06-04

JVM - 바이럴코드를 기계명령을 바꿔준다.
	- 기본환경.

JRE - Java Runtime Enviroment 자바실행환경.
	- JVM + 라이브러리 + 몇개의 컴포넌트
	- 실행환경(사용자).

JDK - JRE + 컴파일러 + 디버거.
	- 어플리케이션 개발 



///////////////////
이클립스 클린코드
 - window - preference - saveAction에서 

저장시 코드를 규격화 정의해줄수있다.



///////////////////
리펙토링.
 - 코드의 기능을 그대로 두고 
	간결화 시켜서 가독성을 높이는 것.

중단점.
 디버깅으로 실행.으로 할시 중단시점까지 실행하는걸 확인할 수 있다.

Debug에는 
 메인 메서드 라인(현재 실행 후 멈춰있는 라인)(호출 스택)

variables
 변수들.

Step Over 해당라인을 실행후 다음 라인으로 넘어감.
Step Into 생성자코드에 들어가서 객체테이블이 만들때 어떻게 되는지 확인되는곳 .



=======================================================
오후 5:30 2022-06-07
절차적 / 구조적 프로그래밍은 ' 절차 ' 함수의 관점에서
 > 만들어야하는 주요 메서드는 무엇이며
 > 문제를 해결하기 위해 어떻게 결합할 것인지 위주로 생각.


객제지형 프로그래밍은 '새로운' 사고방식을 제시합니다.
 > 문제와 과련된 다양한 객체들을 중점적으로 보고.
 > 각자 가진 데이터는 무엇이며, 해당 데이터에 할 수 있는것은 무엇이 있을까? 
로 진행된다.

 > 어떤 데이터를 가지고 어떤 행동을 하느냐로 구분하고 정의하여
 > 객체가 무엇이고, 가진데이터가 무엇이며, 뭘 수행하는지 성.


** 용어
 클래스 - 템플릿
 > 객체가 갖고 있는 데이터와 객체에 행할 수 있는 동작이 무엇인지 규정하는것.
 > ex) '사람' 클래스 = '간디' '이순신'등등이 인스턴스.

 클래스 내부의 멤버데이터/상태/필드는
  모든 객체에 있는 데이터이고,

 메서드 
 > 특정객체에 행할 수 있는 동작을 나타낸다.
 

ex) 클래스 구성하는 법.
고객
 > 이름 . 주소
 > login(),logout(), selectProduct(product)

쇼핑카트
 > items/
 > add(item), remove(item)

상품
 > 이름 가격 수량
 > order(), changePrice()

---------------------------
적용하는 방법.
 --오토바이클래스 만들기.
 --- 속도와 기어를 조절하는 메서드 만들기

>>
오후 11:54 2022-06-08
MotorBike 클래스에 'ducati' 인스턴스를 만들면 메모리에 기록되고.

ducati
speed = 
카테고리가 만들어지고 
거기에 100이 들어가게되고

new를 통해서 변수,인스턴스를 주고 받으면 직접 관련된거라. 
독립성면에서는 좋지못한다. (캡슐화를 파괴하는것 )
 
캡슐화
 특정 데이터에 접근해 값을 설정하는 데이터와 메서드

해결방안 
변수를 private화 >> 비공개로 만들면 클래스 외부에서 접근할 수 없게한다.
------------------------------------------

state
 private int speed;

behavior

method

inputs
 int speed

outputs
 void

name
 setSpeed
--------------------------------------
speed값을 받을시 
 setSpeed(int speed) 
  this.speed = speed; 로 지정해줘야 setter로 쓸수 있다.



오전 2:15 2022-06-09
speed는 setSpeed에서 받은 값을 출력하여 100이 된것이고
this.speed는 이 클래스에서 private int speed의 값을 받아 0이다.

만약 -100을 setSpeed로 넘기고 
if(>0) 조건을 걸어서 출력하면 조건문에 걸려서 실행되지 않고
초기값인 0이 출력된다.

오전 2:13 2022-06-10
----------------------------------------
캡슐화 - 특정개체에 속하는 데이터를 숨겨 접근을 차단하고 연산만 허용.
추상화 - 모든 복잡한 내용을 숨긴다.

setter 없이 객체값을 전달하고 싶을때.
 >> 생성자를 사용하면 된다.
 >> 일반적으로 메서드는 입력시 반환 타입을 구체화해야 하지만. 생성자는 변환타입을 필요하지 않는다.

ex
class MotorBike {

	//state
	 private int speed;
	 
	//생성자
	MotorBike(int speed){
		this.speed = speed;
	}



배운걸 토대로 하나 만들기.



------------------------------------------------------------------
오후 4:12 2022-06-11

16진수 

0123456789ABCDEF

A 10
B 11
C 12
D 13
E 14
F 15


--ㅌㅌㅌㅌㅌ
BiNumber 라는 클래스에서
add ()매개변수 합
multi ()매겨변수 곱
double () 각 매개변수 의 두배
을 구현


-- 93 94 95 96 97
부동 소수 리터럴. / 부동 소수 상수.
ex_
부동 소수값 34.5
부동 소수값 34.5689

double float형

float f = 34.56789 
 >> ERROR
 >> 프로그램이 double로 인식해 float형에 담는걸 거부한다.
 >> float는 4바이트 , double는 8바이트이기 때문입니다.
 >> 큰값은 작은값에 담을 수 없고 8바이트double은 4바이트float형 보다 커서 담을 수없다.

float f = 34.56f;
 >> 로 표기를 고쳐야한다.
doulbe dbl =34.6578;
 float f2  = db1; xxxx
 float g2 = (float)db1;
 >>로 표기를 고쳐야한다.




오후 6:18 2022-06-13
----------------------------------------------------------------------
bigdecimal 

 - bigdecimal끼리 계산된다. 
 - bigdecimal + 2 xxx

BigDecimal 활용
이자율 계산
 - 원금 4500.0
 - 이자율 7.5%
 - 대출기간 5년
 > 대출기간이 끝나고 전체 이익은 얼마일지 구하는


|| && ^ !

char '\u0022'
> c

문자확인 후 
소문자행 / 대문자행.


https://www.google.com/search?q=bigdecimal&oq=bigdecimal&aqs=chrome..69i57.2732j0j7&sourceid=chrome&ie=UTF-8
https://coding-factory.tistory.com/605


codingbat


























